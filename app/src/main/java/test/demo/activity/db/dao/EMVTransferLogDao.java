package test.demo.activity.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import test.demo.activity.db.entiry.EMVTransferLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMVTransferLog".
*/
public class EMVTransferLogDao extends AbstractDao<EMVTransferLog, Long> {

    public static final String TABLENAME = "EMVTransferLog";

    /**
     * Properties of entity EMVTransferLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag9A = new Property(1, String.class, "tag9A", false, "TAG9A");
        public final static Property Tag9F21 = new Property(2, String.class, "tag9F21", false, "TAG9F21");
        public final static Property Tag5F2A = new Property(3, String.class, "tag5F2A", false, "TAG5F2A");
        public final static Property Tag9F02 = new Property(4, String.class, "tag9F02", false, "TAG9F02");
        public final static Property Tag9F4E = new Property(5, String.class, "tag9F4E", false, "TAG9F4E");
        public final static Property Tag9F36 = new Property(6, String.class, "tag9F36", false, "TAG9F36");
        public final static Property TimeStamp = new Property(7, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
    }


    public EMVTransferLogDao(DaoConfig config) {
        super(config);
    }
    
    public EMVTransferLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMVTransferLog\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG9A\" TEXT," + // 1: tag9A
                "\"TAG9F21\" TEXT," + // 2: tag9F21
                "\"TAG5F2A\" TEXT," + // 3: tag5F2A
                "\"TAG9F02\" TEXT," + // 4: tag9F02
                "\"TAG9F4E\" TEXT," + // 5: tag9F4E
                "\"TAG9F36\" TEXT," + // 6: tag9F36
                "\"TIME_STAMP\" INTEGER);"); // 7: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMVTransferLog\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EMVTransferLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag9A = entity.getTag9A();
        if (tag9A != null) {
            stmt.bindString(2, tag9A);
        }
 
        String tag9F21 = entity.getTag9F21();
        if (tag9F21 != null) {
            stmt.bindString(3, tag9F21);
        }
 
        String tag5F2A = entity.getTag5F2A();
        if (tag5F2A != null) {
            stmt.bindString(4, tag5F2A);
        }
 
        String tag9F02 = entity.getTag9F02();
        if (tag9F02 != null) {
            stmt.bindString(5, tag9F02);
        }
 
        String tag9F4E = entity.getTag9F4E();
        if (tag9F4E != null) {
            stmt.bindString(6, tag9F4E);
        }
 
        String tag9F36 = entity.getTag9F36();
        if (tag9F36 != null) {
            stmt.bindString(7, tag9F36);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(8, timeStamp.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EMVTransferLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag9A = entity.getTag9A();
        if (tag9A != null) {
            stmt.bindString(2, tag9A);
        }
 
        String tag9F21 = entity.getTag9F21();
        if (tag9F21 != null) {
            stmt.bindString(3, tag9F21);
        }
 
        String tag5F2A = entity.getTag5F2A();
        if (tag5F2A != null) {
            stmt.bindString(4, tag5F2A);
        }
 
        String tag9F02 = entity.getTag9F02();
        if (tag9F02 != null) {
            stmt.bindString(5, tag9F02);
        }
 
        String tag9F4E = entity.getTag9F4E();
        if (tag9F4E != null) {
            stmt.bindString(6, tag9F4E);
        }
 
        String tag9F36 = entity.getTag9F36();
        if (tag9F36 != null) {
            stmt.bindString(7, tag9F36);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(8, timeStamp.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EMVTransferLog readEntity(Cursor cursor, int offset) {
        EMVTransferLog entity = new EMVTransferLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag9A
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag9F21
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tag5F2A
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag9F02
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tag9F4E
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tag9F36
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EMVTransferLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag9A(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag9F21(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTag5F2A(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTag9F02(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTag9F4E(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTag9F36(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeStamp(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EMVTransferLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EMVTransferLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EMVTransferLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
